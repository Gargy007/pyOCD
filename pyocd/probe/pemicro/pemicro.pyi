# Copyright 2020 NXP
# This is stub for pemicro.py, to provide typing informations
#
# SPDX-License-Identifier:
# BSD-3-Clause

#""

from typing import Any
from .pemicro_const import (PEMicroPortType,
                            PEMicroSpecialFeatures,
                            PEMicroSpecialFeaturesSwdStatus,
                            PEMicroMemoryAccessResults,
                            PEMicroMemoryAccessSize,
                            PEMicroArmRegisters,
                            PEMicroInterfaces
                            )

class PEMicroException(Exception):
    def __init__(self, code: str):...

class PEMicroTransferException(PEMicroException):...

class PyPemicro():

    @staticmethod
    def get_user_friendly_os_name() -> str:...

    @staticmethod
    def get_library_name() -> str:...

    @staticmethod
    def _load_pemicro_lib_info(dll_path: str, lib_name: str) -> dict:...

    @staticmethod
    def get_pemicro_lib_list(dllpath: str = None, search_generic: bool = True) -> list:...

    @staticmethod
    def open_library(file_name: str) -> Any:...

    @staticmethod
    def get_lib_filename(lib_record: dict) -> str:...

    @staticmethod
    def get_newest_lib_filename(lib_list: list) -> str:...

    @staticmethod
    def get_pemicro_lib(dllpath: str = None, get_newest: bool = True) -> Any:...

    @staticmethod
    def list_ports() -> list:...

    @staticmethod
    def print_ports(ports: list) -> None:...

    @staticmethod
    def list_ports_name() -> None:...

    def __init__(self,
                 dllpath: str = None,
                 log_info: Any = None,
                 log_war: Any = None,
                 log_err: Any = None,
                 log_debug: Any = None
                 ) -> None:...

    def _special_features(self,
                          featurenum: int,
                          fset: bool = True,
                          par1: int = 0,
                          par2: int = 0,
                          par3: int = 0,
                          ref1: Any = None,
                          ref2: Any = None) -> None:...

    def reenumerate_all_port_types(self) -> None:...

    def open(self, debug_hardware_name_ip_or_serialnum: str) -> None:...

    @property
    def opened(self) -> bool:...

    def close(self) -> None:...

    def __del__(self) -> None:...

    def open_debug_file(self, filename: str = "log_pemicro_comm.txt") -> None:...

    def close_debug_file(self) -> None:...

    def power_on(self) -> None:...

    def power_off(self) -> None:...

    def reset_target(self) -> None:...

    def target_check_if_halted(self) -> bool:...

    def target_step(self) -> None:...

    def halt_target(self) -> None:...

    def resume_target(self) -> None:...

    def get_mcu_register(self, reg: PEMicroArmRegisters) -> int:...

    def set_mcu_register(self, reg: PEMicroArmRegisters, value: int) -> None:...

    def set_reset_delay_in_ms(self, delay: int) -> None:...

    def flush_any_queued_data(self) -> None:...

    def set_device_name(self, device_name: str = "Cortex-M4") -> None:...

    def get_device_list(self, search_string: str = None) -> list:...

    def version(self) -> str:...

    def version_dll(self) -> int:...

    def connect(self, interface: PEMicroInterfaces = PEMicroInterfaces.SWD, shift_speed: int = 1000000) -> None:... #type: ignore


    def set_debug_frequency(self, freq: int) -> None:...

    def control_reset_line(self, assert_reset: bool = True) -> None:...

    def read_32bit(self, address: int) -> int:...

    def write_32bit(self, address: int, data: int) -> None:...

    def read_16bit(self, address: int) -> int:...

    def write_16bit(self, address: int, data: int) -> None:...

    def read_8bit(self, address: int) -> int:...

    def write_8bit(self, address: int, data: int) -> None:...

    def read_block(self,
                   address: int,
                   size: int,
                   data: bytes,
                   access_bit_size: PEMicroMemoryAccessSize = PEMicroMemoryAccessSize.PE_MEM_ACCESS_32BIT) -> None:... #type: ignore

    def write_block(self,
                    address: int,
                    size: int,
                    data: bytes,
                    access_bit_size: PEMicroMemoryAccessSize = PEMicroMemoryAccessSize.PE_MEM_ACCESS_32BIT) -> None:... #type: ignore

    def load_bin_file(self, filename: str, start_address: int = 0) -> None:...

    def load_srec_file(self, filename: str, offset: int = 0) -> None:...

    def __check_swd_error(self) -> None:...

    def write_ap_register(self, apselect: int, addr: int, value: int, now: bool = False) -> None:...

    def read_ap_register(self, apselect: int, addr: int, now: bool = True, requires_delay: bool = False) -> int:...

    def write_dp_register(self, addr: int, value: int, now: bool = False) -> None:...

    def read_dp_register(self, addr: int, now: bool = True, requires_delay: bool = False) -> int:...

    def last_swd_status(self) -> int:...
